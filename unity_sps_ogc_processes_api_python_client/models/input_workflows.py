# coding: utf-8

"""
    Unity Processing API conforming to the Draft of OGC API - Processes - Part 2: Deploy, Replace, Undeploy

    This document is an API definition document provided alongside the OGC API - Processes standard. The OGC API - Processes Standard specifies a processing interface to communicate over a RESTful protocol using JavaScript Object Notation (JSON) encodings. The specification allows for the wrapping of computational tasks into executable processes that can be offered by a server and be invoked by a client application.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing_extensions import Self

from unity_sps_ogc_processes_api_python_client.models.bbox1 import Bbox1
from unity_sps_ogc_processes_api_python_client.models.input_collection import (
    InputCollection,
)
from unity_sps_ogc_processes_api_python_client.models.input_parameterized import (
    InputParameterized,
)
from unity_sps_ogc_processes_api_python_client.models.input_process import InputProcess
from unity_sps_ogc_processes_api_python_client.models.input_workflows_any_of_inner import (
    InputWorkflowsAnyOfInner,
)
from unity_sps_ogc_processes_api_python_client.models.link import Link
from unity_sps_ogc_processes_api_python_client.models.qualified_input_value_workflows import (
    QualifiedInputValueWorkflows,
)

INPUTWORKFLOWS_ANY_OF_SCHEMAS = [
    "Bbox1",
    "InputCollection",
    "InputParameterized",
    "InputProcess",
    "Link",
    "List[InputWorkflowsAnyOfInner]",
    "List[object]",
    "QualifiedInputValueWorkflows",
    "bool",
    "float",
    "int",
    "str",
]


class InputWorkflows(BaseModel):
    """
    InputWorkflows
    """

    # data type: Bbox1
    anyof_schema_1_validator: Optional[Bbox1] = None
    # data type: InputCollection
    anyof_schema_2_validator: Optional[InputCollection] = None
    # data type: InputParameterized
    anyof_schema_3_validator: Optional[InputParameterized] = None
    # data type: InputProcess
    anyof_schema_4_validator: Optional[InputProcess] = None
    # data type: List[object]
    anyof_schema_5_validator: Optional[List[Any]] = None
    # data type: bool
    anyof_schema_6_validator: Optional[StrictBool] = None
    # data type: float
    anyof_schema_7_validator: Optional[Union[StrictFloat, StrictInt]] = None
    # data type: int
    anyof_schema_8_validator: Optional[StrictInt] = None
    # data type: str
    anyof_schema_9_validator: Optional[StrictStr] = None
    # data type: Link
    anyof_schema_10_validator: Optional[Link] = None
    # data type: QualifiedInputValueWorkflows
    anyof_schema_11_validator: Optional[QualifiedInputValueWorkflows] = None
    # data type: List[InputWorkflowsAnyOfInner]
    anyof_schema_12_validator: Optional[List[InputWorkflowsAnyOfInner]] = None
    if TYPE_CHECKING:
        actual_instance: Optional[
            Union[
                Bbox1,
                InputCollection,
                InputParameterized,
                InputProcess,
                Link,
                List[InputWorkflowsAnyOfInner],
                List[object],
                QualifiedInputValueWorkflows,
                bool,
                float,
                int,
                str,
            ]
        ] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = {
        "Bbox1",
        "InputCollection",
        "InputParameterized",
        "InputProcess",
        "Link",
        "List[InputWorkflowsAnyOfInner]",
        "List[object]",
        "QualifiedInputValueWorkflows",
        "bool",
        "float",
        "int",
        "str",
    }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = InputWorkflows.model_construct()
        error_messages = []
        # validate data type: Bbox1
        if not isinstance(v, Bbox1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Bbox1`")
        else:
            return v

        # validate data type: InputCollection
        if not isinstance(v, InputCollection):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `InputCollection`"
            )
        else:
            return v

        # validate data type: InputParameterized
        if not isinstance(v, InputParameterized):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `InputParameterized`"
            )
        else:
            return v

        # validate data type: InputProcess
        if not isinstance(v, InputProcess):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `InputProcess`"
            )
        else:
            return v

        # validate data type: List[object]
        try:
            instance.anyof_schema_5_validator = v
            return v
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: bool
        try:
            instance.anyof_schema_6_validator = v
            return v
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: float
        try:
            instance.anyof_schema_7_validator = v
            return v
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: int
        try:
            instance.anyof_schema_8_validator = v
            return v
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: str
        try:
            instance.anyof_schema_9_validator = v
            return v
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: Link
        if not isinstance(v, Link):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Link`")
        else:
            return v

        # validate data type: QualifiedInputValueWorkflows
        if not isinstance(v, QualifiedInputValueWorkflows):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `QualifiedInputValueWorkflows`"
            )
        else:
            return v

        # validate data type: List[InputWorkflowsAnyOfInner]
        try:
            instance.anyof_schema_12_validator = v
            return v
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in InputWorkflows with anyOf schemas: Bbox1, InputCollection, InputParameterized, InputProcess, Link, List[InputWorkflowsAnyOfInner], List[object], QualifiedInputValueWorkflows, bool, float, int, str. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[Bbox1] = None
        try:
            instance.actual_instance = Bbox1.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[InputCollection] = None
        try:
            instance.actual_instance = InputCollection.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[InputParameterized] = None
        try:
            instance.actual_instance = InputParameterized.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[InputProcess] = None
        try:
            instance.actual_instance = InputProcess.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[object]
        try:
            # validation
            instance.anyof_schema_5_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.anyof_schema_5_validator
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into bool
        try:
            # validation
            instance.anyof_schema_6_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.anyof_schema_6_validator
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into float
        try:
            # validation
            instance.anyof_schema_7_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.anyof_schema_7_validator
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into int
        try:
            # validation
            instance.anyof_schema_8_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.anyof_schema_8_validator
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.anyof_schema_9_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.anyof_schema_9_validator
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[Link] = None
        try:
            instance.actual_instance = Link.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[QualifiedInputValueWorkflows] = None
        try:
            instance.actual_instance = QualifiedInputValueWorkflows.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[InputWorkflowsAnyOfInner]
        try:
            # validation
            instance.anyof_schema_12_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.anyof_schema_12_validator
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into InputWorkflows with anyOf schemas: Bbox1, InputCollection, InputParameterized, InputProcess, Link, List[InputWorkflowsAnyOfInner], List[object], QualifiedInputValueWorkflows, bool, float, int, str. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
            self.actual_instance.to_json
        ):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            Bbox1,
            InputCollection,
            InputParameterized,
            InputProcess,
            Link,
            List[InputWorkflowsAnyOfInner],
            List[object],
            QualifiedInputValueWorkflows,
            bool,
            float,
            int,
            str,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
            self.actual_instance.to_dict
        ):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
